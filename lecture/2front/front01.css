/* tag */
/* .id */
/* #class */
/* 1. importance of inheritance and logic */
    /* fonts are usually inheritable */
    /* layouts are usually not inheritable */
    /* user agent stylesheet overrides inheritance */


/* DEFAULT ARRANGEMENT = NORMAL FLOW */



/* FONTS CSS ------------------------------------------------------------------------ */

/* SUPER */

html {
    /* usually pixels for font-size */
    font-size: 18px;
    /* font-weights can be words or a number between 100 to 900 */
    font-weight: normal;
    font-weight: 500;
    /* display as 'block' or 'inline' */
    display: block;
}

/* SUBS */

p {
    /* adding fonts */
        /* multiple fonts to ensure a backup font incase a certain font is unavailable */
        /* use '' or "" only property values with spacebars */
        /* can also use webfonts that are contained in the web but not on the localhost */
    font-family: Arial, Helvetica, sans-serif, 'Times New Roman', Times, serif;
    font-size: 14px; 
    font-weight: bold;
}

h1, h2, h3 {
    /* inherits the parent property, overriding user agent stylesheet */
    font-size: inherit;
    /* font-style : normal, bold, italic, etc.*/
    font-style: italic;
    font-style: normal;
}

li {
    /* emphasize font: *n the font-size of the parent */
    /* when the ITEM repeats, em can repeat. to prevent issues, use r(root)em */
    font-size: 1.5em;
    font-size: 1.5rem;
}

dl {
    /* fonts shortened property */
    /* font: style weight size family */
        /* 1. style and weight has to come in front of size */
        /* 2. family has to come last */
    font: normal 500 1.5rem Arial, Helvetica, sans-serif, 'Times New Roman', Times, serif;
}
 


/* LAYOUT CSS ----------------------------------------------------------------------- */


dt {
    /* text-align: the positioning of the text */
    text-align: right;
    text-align: center;
    /* line-height: line spacing */
        /* 1 : spacing height is the height of the font = no spacing */
    line-height: 1;
    line-height: 1.2;
}



/* COLOR CSS ----------------------------------------------------------------------- */


dd {
    /* color can be keyword (120 types) / rgb code / rgb() */
        /* rgb(255, 255, 255) */
        /* the lower the darker */
        /* #ffffff - white / #000000 - black */
    color: blue;
    color: rgb(255, 0, 255);
    /* rgba (0, 0, 0, a) : a - transparency */
        /* 0=< a <= 1 */
        /* a=1 : 100% transparency */
    color: rgba(255, 0, 255, 0.5)
}



/* BGC CSS ----------------------------------------------------------------------- */


.contain {
    background-color: #fff;
    /* background-image: ; */
}



/* INLINE PADDING BORDER MARGIN -------------------------------------------------- */


/* BOX-SIZING = CONTENT-BOX & BORDER-BOX */
/* content-box: default behavior of a css box */
    /* - border padding margins are added to the width/height to arrive at the size of the box rendered on screen */
/* border-box: takes padding and margin calculations into account 
    /* - adjusts the content box in order to match the set width/height */
.first{
    box-sizing: content-box;
    background: yellow;
    width: 200;
    /* height: 80; */
    padding: 10px;
        /* order doesn't matter */
    border: 3px solid black;
        /* up right down left */
    margin: 0px 0px 5px 0px;
}

.second {
    box-sizing: border-box;
    background: purple;
    width: 300;
    /* height: 50; */
    padding: 20px;
    border: 3px dotted black;
        /* margins to not add up but instead 
        renders the larger margin size as the gap between the two elements */
    margin: 5px 0px 0px 0px;
}


/* in inline elements, width/height do not have any effect */
.inlinespan {
    width: 200px;
}

.inlinea {
    height: 15px;
}

/* multimedia exception: allows image or other multimedia inline elements to take width/height */
.img1 {
    width: 300px;
}

h3 {
    /* display: inline; */
    /* display: block; */
    background: lightgreen;
    width: 200;
}



/* ARRANGEMENT EXTENSION -----------------------------------------------------------*/
/* 1. float (different from inline) */
    /* - floats above all inline element until <br> or block */
    /* - note the difference between 'display: inline;' and 'float:left/right;' */
    /* - for multiple floats use one side and css will automatically place float the above element first */
    /* - 'clear:left/right/both;' to clear the leftover float space and enter new line */
/* 2. position */
    /* - 'position: static;' default arrangement */
    /* - 'position: relative;' changes the arrangement of the element from its original space alone not affecting any other element */
    /* - 'position: absolute;' withdraws its place in the page and positions in the given position of the entire page */
    /* - 'position: fixed;' fixed the element on the given location of the browser regardless of page scroll */
    

.img1 {
        /* float */
    float: left;
    /* display: inline; */
}

.img2 {
    display: block;
    clear: both;
    width: 330;
        /* position */
    /* position: relative; */
    position: absolute;
    /* position: fixed; */
    top: 100px;
    left: 0px;
}